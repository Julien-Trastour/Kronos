generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id         String  @id @default(uuid())
  name       String  @unique
  employees  Employee[]
  createdAt  DateTime @default(now())

  parentRole  Role?    @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  parentRoleId String?

  subRoles    Role[]   @relation("RoleHierarchy")
}

model Agency {
  id            String     @id @default(uuid())
  name          String
  typeId        String?    // ✅ Ajout TEMPORAIREMENT en optionnel
  type          AgencyType? @relation(fields: [typeId], references: [id]) // ✅ Relation correcte
  address       String
  addressExtra  String?
  postalCode    String
  city          String

  manager       Employee?  @relation("AgencyManager", fields: [managerId], references: [id])
  managerId     String?    @unique

  employees     Employee[] @relation("AgencyEmployees")
  teams         Team[]     @relation("AgencyTeams")

  employeeCount Int        @default(0)
  status        String
  createdAt     DateTime   @default(now())
}

model AgencyType {
  id        String  @id @default(uuid())
  name      String  @unique
  agencies  Agency[]
}

model Team {
  id          String   @id @default(uuid())
  name        String   @unique
  members     Int      @default(0)

  leader      Employee? @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId    String?  @unique

  agency      Agency   @relation("AgencyTeams", fields: [agencyId], references: [id])
  agencyId    String

  parentTeam  Team?    @relation("SubTeam", fields: [parentTeamId], references: [id])
  parentTeamId String?
  subTeams    Team[]   @relation("SubTeam")

  employees   Employee[] @relation("TeamEmployees")
  createdAt   DateTime @default(now())
}

model Employee {
  id         String  @id @default(uuid())
  email      String  @unique
  password   String
  firstName  String
  lastName   String

  role       Role    @relation(fields: [roleId], references: [id])
  roleId     String
  agency     Agency? @relation("AgencyEmployees", fields: [agencyId], references: [id])
  agencyId   String?

  team       Team?   @relation("TeamEmployees", fields: [teamId], references: [id])
  teamId     String?

  managedTeam Team?  @relation("TeamLeader")
  managedAgency Agency? @relation("AgencyManager")

  status     String  @default("Actif")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
