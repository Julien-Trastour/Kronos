import request from "supertest";
import app from "../src/server.js";
import { PrismaClient } from "@prisma/client";
import argon2 from "argon2"; // üîπ Hachage des mots de passe

const prisma = new PrismaClient();
let adminToken, permissionId, roleId;

beforeAll(async () => {
    // üîπ V√©rifier et cr√©er le r√¥le "PDG"
    const adminRole = await prisma.role.upsert({
        where: { name: "PDG" },
        update: {},
        create: { name: "PDG" }
    });

    // üîπ V√©rifier et cr√©er une permission
    const permission = await prisma.permission.upsert({
        where: { name: "G√©rer les utilisateurs" },
        update: {},
        create: { name: "G√©rer les utilisateurs", category: "Admin" }
    });

    permissionId = permission.id;
    roleId = adminRole.id;

    // üîπ Supprimer l'admin s'il existe d√©j√†
    await prisma.user.deleteMany({ where: { email: "admin@test.com" } });

    // üîπ Hacher le mot de passe
    const hashedPassword = await argon2.hash("password123");

    // üîπ Cr√©er l'utilisateur admin
    await prisma.user.create({
        data: {
            firstName: "Admin",
            lastName: "Test",
            email: "admin@test.com",
            password: hashedPassword,
            roleId: adminRole.id,
            entryDate: new Date(),
            seniority: "0 ans"
        }
    });

    // üîπ R√©cup√©rer le token apr√®s connexion
    const resAdmin = await request(app)
        .post("/auth/login")
        .send({ email: "admin@test.com", password: "password123" });

    adminToken = resAdmin.body.token;
});

afterAll(async () => {
    await prisma.rolePermission.deleteMany();
    await prisma.permission.deleteMany();
    await prisma.user.deleteMany({ where: { email: "admin@test.com" } });
    await prisma.$disconnect();
});

test("üîπ Un admin peut attribuer une permission √† un r√¥le", async () => {
    const res = await request(app)
        .post("/permissions/assign")
        .set("Authorization", `Bearer ${adminToken}`)
        .send({ roleId, permissionId });

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("message", "Permission attribu√©e au r√¥le avec succ√®s.");
});

test("üîπ Un admin peut retirer une permission d'un r√¥le", async () => {
    const res = await request(app)
        .post("/permissions/remove")
        .set("Authorization", `Bearer ${adminToken}`)
        .send({ roleId, permissionId });

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("message", "Permission retir√©e du r√¥le avec succ√®s.");
});
